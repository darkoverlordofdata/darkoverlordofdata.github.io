// Generated by CoffeeScript 1.6.3
(function() {
  (function($, window, document) {
    var Muninn;
    $.prototype.muninn = function($options) {
      var _ref;
      if ($options == null) {
        $options = {};
      }
      return (_ref = $.data(this, 'muninn')) != null ? _ref : $.data(this, 'muninn', new Muninn(this, $options));
    };
    return Muninn = (function() {
      var path, saveAs, yaml;

      saveAs = require('./FileSaver');

      yaml = require('yaml-js');

      path = require('path');

      Muninn.prototype["default"] = {
        title: ' ',
        date: 'select blog to edit',
        content: '',
        css: '//cdn.darkoverlordofdata.com/css/bootstrap.min.css'
      };

      Muninn.prototype.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      Muninn.prototype.options = null;

      Muninn.prototype.title = null;

      Muninn.prototype.date = null;

      Muninn.prototype.content = null;

      Muninn.prototype.file = null;

      Muninn.prototype.save = null;

      Muninn.prototype.filename = '';

      function Muninn($container, $options) {
        var _this = this;
        this.options = $.extend(this["default"], $options);
        $container.html("<input type=\"file\" class=\"btn btn-primary muninn-file\"/>\n<button class=\"btn btn-primary muninn-save\">Save</button>\n<h1 class=\"editable muninn-title\"></h1>\n<p  class=\"editable muted muninn-date\"></p>\n<div class=\"editable muninn-content\"></div>");
        this.title = $container.find('.muninn-title');
        this.date = $container.find('.muninn-date');
        this.content = $container.find('.muninn-content');
        this.file = $container.find('.muninn-file');
        this.save = $container.find('.muninn-save');
        this.title.html(this.options.title);
        this.date.html(this.options.date);
        this.content.html(this.options.content);
        this.save.hide();
        tinymce.init({
          selector: 'h1.editable',
          inline: true,
          menubar: false,
          content_css: this.options.css,
          toolbar: 'undo redo'
        });
        tinymce.init({
          selector: 'p.editable',
          inline: true,
          menubar: false,
          content_css: this.options.css,
          toolbar: 'undo redo'
        });
        tinymce.init({
          selector: 'div.editable',
          inline: true,
          menubar: false,
          content_css: this.options.css,
          plugins: ["advlist autolink autosave link image lists charmap print preview hr anchor pagebreak spellchecker", "searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking", "table contextmenu directionality emoticons template textcolor paste fullpage textcolor"],
          toolbar1: "newdocument fullpage | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | styleselect formatselect fontselect fontsizeselect",
          toolbar2: "cut copy paste | searchreplace | bullist numlist | outdent indent blockquote | undo redo | link unlink anchor image media code | inserttime preview | forecolor backcolor",
          toolbar3: "table | hr removeformat | subscript superscript | charmap emoticons | print fullscreen | ltr rtl | spellchecker | visualchars visualblocks nonbreaking template pagebreak restoredraft"
        });
        this.file.on('change', function($e) {
          var files, reader;
          files = $e.target.files;
          reader = new FileReader;
          reader.onload = (function($file) {
            return function($e) {
              var $buf, $dd, $ext, $hdr, $mm, $name, $seg, $yy;
              $buf = $e.target.result;
              $hdr = {};
              if ($buf.slice(0, 4) === '---\n') {
                $buf = $buf.split('---\n');
                $hdr = yaml.load($buf[1]);
                $buf = $buf[2];
              }
              $ext = path.extname($file.name);
              $name = path.basename($file.name, $ext);
              $seg = $name.split('-');
              $yy = $seg.shift();
              $mm = $seg.shift();
              $dd = $seg.shift();
              _this.content.html($buf);
              _this.title.html($hdr.title);
              _this.date.html($dd + ' ' + _this.months[$mm - 1] + ', ' + $yy);
              _this.file.hide();
              _this.save.show();
              return _this.filename = $file.name;
            };
          })(files[0]);
          return reader.readAsBinaryString(files[0]);
        });
        this.save.on('click', function($e) {
          var $blob, $data;
          $data = ["---\n", "title: " + (_this.title.html()) + "\n", "---\n", _this.content.html()];
          $blob = new Blob($data);
          return saveAs($blob, "document.xhtml");
        });
      }

      return Muninn;

    })();
  })(jQuery, window, document);

}).call(this);
